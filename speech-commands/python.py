from dragonfly import *
import utils, vscode2
import contexts

functions = {
    "absolute": "abs",
    "a sink context manager": "asynccontextmanager",
    "all": "all",
    "any": "any",
    "boolean": "bool",
    "callable": "callable",
    "context manager": "contextmanager",
    "default (dictionary | dict)": "defaultdict",
    "dear": "dir",
    "delete attribute": "delattr",
    "dictionary": "dict",
    "enumerate": "enumerate",
    "eye d": "id",
    "filter": "filter",
    "float": "float",
    "format": "format",
    "global's": "globals",
    "get attribute": "getattr",
    "input": "input",
    "int": "int",
    "is instance": "isinstance",
    "it er": "iter",
    "join": "join",
    "length": "len",
    "list": "list",
    "locals": "locals",
    "min": "min",
    "max": "max",
    "object": "object",
    "open": "open",
    "print": "print",
    "range": "range",
    "reversed": "reversed",
    "round": "round",
    "set": "set",
    "set attribute": "setattr",
    "slice": "slice",
    "sorted": "sorted",
    "split": "split",
    "string": "str",
    "sum": "sum",
    "super": "super",
    "two pull": "tuple",
    "update": "update",
    "oh ess [dot] path [dot] join": "os.path.join",
    "zip": "zip",
}

errors = {
    "(assert|assertion) error": "AssertionError",
    "key error": "KeyError",
    "exception": "Exception",
    "import error": "ImportError",
    "index error": "IndexError",
    "not implemented error": "NotImplementedError",
    "oh s error": "OSError",
    "run time error": "RuntimeError",
    "type error": "TypeError",
    "value error": "ValueError",
}

modules = {
    'arg parse': 'argparse',
    'a sink eye oh': 'asyncio',
    'context lib': 'contextlib',
    "sea ess v": "csv",
    'collections': 'collections',
    '(jay son | jay saw n)': 'json',
    'logging': 'logging',
    'eye oh': 'io',
    "it er tools": "itertools",
    'multi processing': 'multiprocessing',
    'o s': "os",
    'o s [dot] path': "os.path",
    'queue': 'queue',
    'regular (expression | expressions)': 're',
    'requests': 'requests',
    's h you till': 'shutil',
    'sis': 'sys',
    'time': 'time',
    'threading': 'threading',
    'types': 'types',
    'typing': 'typing',
    'unit test': 'unittest',
    "you you eye dee": "uuid",
    "z lib": "zlib",
    "funk tools": "functools",
    "statistics": "statistics",
    "random": "random",
    "math": "math",
    "copy": "copy",
    "weak ref": "weakref",
    "date time": "datetime",
    "sis": "sys",
}

mapping = {
    "assert": "assert ",
    "assign": " = ",
    "arrow": " -> ",
    "break": "break",
    "compare": " == ",
    "continue": "continue",
    "contrast": " != ",
    "fin": vscode2.insert_padded(" in "),
    "fizz": vscode2.insert_padded(" is "),
    "from": vscode2.insert_padded("from "),
    "from <modules> import": "from %(modules)s import ",
    "import": vscode2.insert_padded("import "),
    "import <modules>": "import %(modules)s",
    "just <modules>": "%(modules)s",
    "not": vscode2.insert_padded("not "),
    "raise": vscode2.insert_padded("raise "),
    "list comprehension": "[x for x in ]{left}",
    "return": vscode2.insert_padded("return "),
    "skiff": vscode2.insert_padded("if "),
    "else": vscode2.insert_padded("else "),
    "stand": vscode2.insert_padded(" and "),
    "store": vscode2.insert_padded(" or "),
    "a sink": vscode2.insert_padded("async "),
    "<errors>": "%(errors)s",
    "if expression": " if  else {left:10}",
    "if state": "if :{left}",
    "while loop": "while :{left}",
    "else state": "else:{enter}",
    "if else state": "if :\npass\nelse:\npass{up:3}{left}",
    "what about": "elif :{left}",
    "try except": "try:{c-enter}pass{c-enter}except:{c-enter}pass{up:2}{c-d}",
    "pass": "pass",
    "true": "True",
    "false": "False",
    "none": "None",
    "list": "[]{left}",
    "two pull": "(){left}",
    "dictionary": "{{}}{left}",
    "slice": "[:]{left:2}",
    "define function": "def ():{left:3}",
    "define lambda": "lambda :{left}",
    "define method": "def (self):{left:7}",
    "define class": "class :{enter}def __init__(self):{enter}pass{up:2}{end}{left}",
    "just <functions>": "%(functions)s",
    "double under": "____{left:2}",
    "call <functions>": "%(functions)s(){left}",
    "read file": "with open() as f:{left:7}",
    "write file": "with open(, 'w') as f:{left:12}",
    "read binary": "with open(, 'rb') as f:{left:14}",
    "write binary": "with open(, 'wb') as f:{left:14}",
    "with state": "with :{left}",
    "with": vscode2.insert_padded("with "),
    "as": vscode2.insert_padded(" as "),
    "for loop": "for :{left}",
    "for enumerate": "for i,  in enumerate():{left:16}",
    "index": "[]{left}",
    "string": '""{left}',
    "single string": "''{left}",
    "f string": 'f""{left}',
    "single f string": "f''{left}",
    "args": '*args',
    "kwargs": '**kwargs',
    "define (initializer | constructor)": "def __init__(self):{left:2}",
    "annotate": vscode2.insert_padded(": "),
    "this": "self",
}
extras = [Choice("functions", functions), Choice("errors", errors), Choice('modules', modules)]
utils.load_commands(contexts.python, commands=mapping, extras=extras)
